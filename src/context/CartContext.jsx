import { createContext, useContext, useState, useEffect } from "react";
import {
  getOrCreateCart,
  addItemToCart as apiAddItemToCart,
  updateCartItem as apiUpdateCartItem,
  removeCartItem as apiRemoveCartItem,
  clearUserCart,
  confirmOrder,
} from "../services/api";

const CartContext = createContext();

export function CartProvider({ children, telegramId, username, phoneNumber, customerName }) {
  const [cart, setCart] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (telegramId) {
      loadCart();
    }
  }, [telegramId]);

  // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
  async function loadCart() {
    setLoading(true);
    try {
      const data = await getOrCreateCart(telegramId, username, phoneNumber, customerName);
      setCart(data);
      return data;
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:", err);
    } finally {
      setLoading(false);
    }
  }

  // ‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
  async function addToCart(product, quantity = 1) {
    try {
      let currentCart = cart;
      if (!currentCart) {
        currentCart = await loadCart();
      }

      const existingItem = currentCart.items?.find((i) => i.product.id === product.id);

      if (existingItem) {
        await apiUpdateCartItem(existingItem.id, existingItem.quantity + quantity);
      } else {
        await apiAddItemToCart(currentCart.id, product.id, quantity);
      }

      await loadCart(); // üöÄ –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:", err);
    }
  }

  // ‚úÖ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
  async function removeFromCart(itemId) {
    try {
      await apiRemoveCartItem(itemId);
      await loadCart(); // üöÄ –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", err);
    }
  }

  // ‚úÖ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
  async function clearCart() {
    try {
      await clearUserCart(telegramId);
      await loadCart(); // üöÄ –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:", err);
    }
  }

  // ‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
  async function checkout() {
    try {
      if (!cart) return null;
      await confirmOrder(cart.id);
      await loadCart(); // üöÄ –∫–æ—Ä–∑–∏–Ω–∞ —Å–±—Ä–æ—Å–∏—Ç—Å—è
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", err);
    }
  }

  return (
    <CartContext.Provider
      value={{
        cart,
        loading,
        addToCart,
        removeFromCart,
        clearCart,
        checkout,
        reloadCart: loadCart,
      }}
    >
      {children}
    </CartContext.Provider>
  );
}

export const useCart = () => useContext(CartContext);