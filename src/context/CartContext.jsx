import { createContext, useContext, useState, useEffect } from "react";
import {
  getOrCreateCart,
  addItemToCart as apiAddItemToCart,
  updateCartItem as apiUpdateCartItem,
  removeCartItem as apiRemoveCartItem,
  clearUserCart,
  confirmOrder,
} from "../services/api";

const CartContext = createContext();

export function CartProvider({ children, telegramId, username, phoneNumber, customerName }) {
  const [cart, setCart] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (telegramId) {
      loadCart();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [telegramId]);

  // üîÑ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
  async function loadCart() {
    setLoading(true);
    try {
      const data = await getOrCreateCart(telegramId, username, phoneNumber, customerName);
      // –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª null/undefined ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
      const safe = {
        ...data,
        items: Array.isArray(data?.items) ? data.items : [],
        total_cost: data?.total_cost ?? 0,
      };
      setCart(safe);
      return safe;
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:", err);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º cart –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const empty = { id: null, items: [], total_cost: 0 };
      setCart((prev) => prev ?? empty);
      return empty;
    } finally {
      setLoading(false);
    }
  }

  // –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ total (—É—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ final_price)
  function recalcTotal(items = []) {
    return items.reduce((sum, i) => {
      const qty = Number(i?.quantity || 0);
      const unit = Number(i?.product?.final_price ?? i?.product?.price ?? 0);
      return sum + qty * unit;
    }, 0);
  }

  // ‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ, —Å –∑–∞–º–µ–Ω–æ–π temp-item –∏ –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π)
  async function addToCart(product, quantity = 1) {
    let currentCart = cart;
    try {
      if (!currentCart) {
        currentCart = await loadCart();
      }

      const existingItem = currentCart.items?.find((i) => i.product?.id === product.id);

      if (existingItem) {
        // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ
        const newQuantity = existingItem.quantity + quantity;
        const updatedItems = currentCart.items.map((i) =>
          i.id === existingItem.id ? { ...i, quantity: newQuantity } : i
        );

        setCart({
          ...currentCart,
          items: updatedItems,
          total_cost: recalcTotal(updatedItems),
        });

        try {
          await apiUpdateCartItem(existingItem.id, newQuantity);
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", err);
        }

        // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
        await loadCart();
      } else {
        // —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π item —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º final_price, —á—Ç–æ–±—ã UI –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª "‚Äî"
        const tempId = `temp-${Date.now()}`;
        const unitPrice = product?.final_price ?? product?.price ?? 0;
        const tempItem = {
          id: tempId,
          product: {
            ...product,
            final_price: unitPrice,
            price: product?.price ?? unitPrice,
          },
          quantity,
          total_price: Number(unitPrice) * Number(quantity),
        };

        const updatedItems = [...(currentCart.items || []), tempItem];

        // –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        setCart({
          ...currentCart,
          items: updatedItems,
          total_cost: recalcTotal(updatedItems),
        });

        try {
          // —Å–æ–∑–¥–∞—ë–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          const created = await apiAddItemToCart(currentCart.id, product.id, quantity);

          if (created && created.id) {
            // –∑–∞–º–µ–Ω—è–µ–º temp –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π item (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç)
            setCart((prev) => {
              const items = (prev?.items || []).map((i) => (i.id === tempId ? created : i));
              return {
                ...(prev || {}),
                items,
                total_cost: recalcTotal(items),
              };
            });
          }
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", err);
          // –µ—Å–ª–∏ —É–ø–∞–ª–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å (–æ—Ç–∫–∞—Ç/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞)
        } finally {
          // –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
          await loadCart();
        }
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –≤ addToCart:", err);
      // –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ ‚Äî –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
      await loadCart();
    }
  }

  // ‚úÖ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ)
  async function removeFromCart(itemId) {
    try {
      if (!cart) return;

      const updatedItems = (cart.items || []).filter((i) => i.id !== itemId);

      // –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ
      setCart({
        ...cart,
        items: updatedItems,
        total_cost: recalcTotal(updatedItems),
      });

      try {
        await apiRemoveCartItem(itemId);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", err);
      } finally {
        await loadCart();
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", err);
      await loadCart();
    }
  }

  // ‚úÖ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ)
  async function clearCart() {
    try {
      if (!cart) return;

      setCart({
        ...cart,
        items: [],
        total_cost: 0,
      });

      try {
        await clearUserCart(telegramId);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", err);
      } finally {
        await loadCart();
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:", err);
      await loadCart();
    }
  }

  // ‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
  async function checkout() {
    try {
      if (!cart) return null;

      await confirmOrder(cart.id);

      // –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É (–æ–±—ã—á–Ω–æ –ø—É—Å—Ç—É—é)
      await loadCart();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", err);
      await loadCart();
    }
  }

  return (
    <CartContext.Provider
      value={{
        cart,
        loading,
        addToCart,
        removeFromCart,
        clearCart,
        checkout,
        reloadCart: loadCart,
      }}
    >
      {children}
    </CartContext.Provider>
  );
}

export const useCart = () => useContext(CartContext);
