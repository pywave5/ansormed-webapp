import { createContext, useContext, useState, useEffect } from "react";
import {
  getOrCreateCart,
  addItemToCart as apiAddItemToCart,
  updateCartItem as apiUpdateCartItem,
  removeCartItem as apiRemoveCartItem,
  clearUserCart,
  confirmOrder,
} from "../services/api";

const CartContext = createContext();

export function CartProvider({ children, telegramId, username, phoneNumber, customerName }) {
  const [cart, setCart] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (telegramId) {
      loadCart();
    }
  }, [telegramId]);

  // üîÑ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
  async function loadCart() {
    setLoading(true);
    try {
      const data = await getOrCreateCart(telegramId, username, phoneNumber, customerName);
      setCart(data);
      return data;
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:", err);
    } finally {
      setLoading(false);
    }
  }

  function recalcTotal(items) {
    return items.reduce(
      (sum, i) => sum + i.quantity * i.product.final_price,
      0
    );
  }

  // ‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ)
  async function addToCart(product, quantity = 1) {
    try {
      let currentCart = cart;
      if (!currentCart) {
        currentCart = await loadCart();
      }

      const existingItem = currentCart.items?.find((i) => i.product.id === product.id);
      let updatedItems;

      if (existingItem) {
        const newQuantity = existingItem.quantity + quantity;
        updatedItems = currentCart.items.map((i) =>
          i.id === existingItem.id ? { ...i, quantity: newQuantity } : i
        );
      } else {
        const tempId = `temp-${Date.now()}`;
        const newItem = {
          id: tempId,
          product,
          quantity,
        };
        updatedItems = [...(currentCart.items || []), newItem];
      }

      // üî• –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      setCart({
        ...currentCart,
        items: updatedItems,
        total_cost: recalcTotal(updatedItems),
      });

      // üöÄ API –∑–∞–ø—Ä–æ—Å
      if (existingItem) {
        await apiUpdateCartItem(existingItem.id, existingItem.quantity + quantity);
      } else {
        await apiAddItemToCart(currentCart.id, product.id, quantity);
      }

      // üîÑ –ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      await loadCart();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:", err);
    }
  }

  // ‚úÖ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ)
  async function removeFromCart(itemId) {
    try {
      if (!cart) return;

      const updatedItems = cart.items.filter((i) => i.id !== itemId);

      // üî• –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      setCart({
        ...cart,
        items: updatedItems,
        total_cost: recalcTotal(updatedItems),
      });

      // üöÄ API –∑–∞–ø—Ä–æ—Å
      await apiRemoveCartItem(itemId);

      // üîÑ –ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      await loadCart();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", err);
    }
  }

  // ‚úÖ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ)
  async function clearCart() {
    try {
      if (!cart) return;

      // üî• –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      setCart({
        ...cart,
        items: [],
        total_cost: 0,
      });

      // üöÄ API –∑–∞–ø—Ä–æ—Å
      await clearUserCart(telegramId);

      // üîÑ –ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      await loadCart();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:", err);
    }
  }

  // ‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
  async function checkout() {
    try {
      if (!cart) return null;

      // üöÄ API –∑–∞–ø—Ä–æ—Å
      await confirmOrder(cart.id);

      // üîÑ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–∞ –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π
      await loadCart();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", err);
    }
  }

  return (
    <CartContext.Provider
      value={{
        cart,
        loading,
        addToCart,
        removeFromCart,
        clearCart,
        checkout,
        reloadCart: loadCart,
      }}
    >
      {children}
    </CartContext.Provider>
  );
}

export const useCart = () => useContext(CartContext);